{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","creatField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","discriptionBlock","src","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Post","item","message","likesCount","maxLength","maxLengthCreator","AddNewPostReduxForm","Field","component","name","placeholder","validate","required","MyPosts","React","memo","PostsElements","posts","p","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.acaf375c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__2q0GZ\",\"discriptionBlock\":\"ProfileInfo_discriptionBlock__14Cp7\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1eZB1\",\"contact\":\"ProfileInfo_contact__VphNp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__DKnWn\",\"posts\":\"MyPosts_posts__CU8Vc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__17Zex\"};","import React, {ChangeEvent, useEffect, useState,} from 'react';\nimport s from './ProfileInfo.module.css'\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\n\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deActivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode &&\n            <div>\n                <b>Status</b>: <span onDoubleClick={activateEditMode}>{props.status || \"---\"}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deActivateEditMode} value={status}/>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {creatField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileInfoType} from \"./ProfileInfo\";\r\nimport {ProfileType} from \"../../../redux/store\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\n// Video: 97,  time: 51.30\r\n// Video: 11 - React + TypeScript / Типизируем ВСЁ / React JS - Путь Самурая 2.0 , time: 1.18.30\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType,\r\n    ProfileDataFormPropsType> & ProfileDataFormPropsType> = ({\r\n                                                                 handleSubmit,\r\n                                                                 profile,\r\n                                                                 error\r\n                                                             }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>save</button>\r\n        </div>\r\n        {error && <div className={style.formSummaryError}>{error}</div>}\r\n        <div>\r\n            <b>Full name</b>: {creatField('Full name', 'fullName', [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>:\r\n            {creatField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            {creatField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n        </div>\r\n\r\n        <div>\r\n            <b>About me</b>:\r\n            {creatField('About me', 'aboutMe', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>:\r\n            {Object\r\n                .keys(profile.contacts)\r\n                .map(key => {\r\n                    return <div key={key} className={s.contact}>\r\n                        <b>{key}: {creatField(key, 'contacts.' + key, [], Input)}</b>\r\n                    </div>\r\n                    /*                    return <Contact contactTitle={key}\r\n                                                        contactValue={profile.contacts[key as keyof ContactValueType]}/>*/\r\n                })}\r\n        </div>\r\n    </form>\r\n}\r\n// type FormDataType = {\r\n//     email: string\r\n//     password: string\r\n//     rememberMe: boolean\r\n// }\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {useState} from 'react';\nimport s from './ProfileInfo.module.css'\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport {ProfileType} from \"../../../redux/store\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/images/user.png\";\nimport {ChangeEvent} from 'react';\nimport ProfileDataForm from './ProfileDataForm';\n\n\nexport type ProfileInfoType = {\n    isOwner: boolean\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profileData:ProfileType) => Promise<ProfileType>\n}\n// type contactValueType = {\n//     \"facebook\": string,\n//     \"website\": string,\n//     \"vk\": string,\n//     \"twitter\": string,\n//     \"instagram\": string,\n//     \"youtube\": string,\n//     \"github\": string,\n//     \"mainLink\": string\n// }\n\nexport type ContactValueType = {\n    facebook: string | null,\n    website: string | null,\n    vk: string | null,\n    twitter: string | null,\n    instagram: string | null,\n    youtube: string | null,\n    github: string | null,\n    mainLink: string | null\n}\n/*type contactValueType = {\n    \"facebook\": string | null,\n    \"website\": string | null,\n    \"vk\": string | null,\n    \"twitter\": string | null,\n    \"instagram\": string | null,\n    \"youtube\": string | null,\n    \"github\": string | null,\n    \"mainLink\": string | null\n}*/\n\nexport type ContactType = {\n    contactTitle: string,\n    contactValue: string | null\n}\n\nconst ProfileInfo: React.FC<ProfileInfoType> = ({\n                                                    profile,\n                                                    status,\n                                                    updateStatus,\n                                                    isOwner,\n                                                    savePhoto,\n                                                    saveProfile\n                                                }) => {\n\n    let [editMode, setEditMode] = useState(false)\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n    const onSubmit = (formData: ProfileType) => {\n        saveProfile(formData).then (\n            () => {\n                setEditMode(false)\n            }\n        )\n    }\n    return (\n        <div>\n            {/* <div className={s.content}>\n                <img\n                    src={photoFon}\n                    // src=\"https://helpx.adobe.com/content/dam/help/en/photoshop/using/convert-color-image-black-white/jcr_content/main-pars/before_and_after/image-before/Landscape-Color.jpg\"\n\n                    alt=\"\"/>\n            </div>*/}\n            <div className={s.discriptionBlock}>\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\n                {editMode\n                    ? <ProfileDataForm initialValues={profile} onSubmit={onSubmit} profile={profile}/>\n                    : <ProfileData goToEditMode={() => {\n                        setEditMode(true)\n                    }} profile={profile} isOwner={isOwner}/>}\n\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n            </div>\n        </div>\n    )\n}\nexport type ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner?: boolean\n    goToEditMode?: () => void\n}\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n    return <div>\n        {isOwner && <div>\n            <button onClick={goToEditMode}>edit</button>\n        </div>}\n        <div>\n            <b>Full name</b>: {profile.fullName}\n        </div>\n        <div>\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        {profile.lookingForAJob &&\n        <div>\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\n        </div>\n        }\n        <div>\n            <b>About me</b>: {profile.aboutMe}\n        </div>\n        <div>\n            <b>Contacts</b>:\n            {Object\n                .keys(profile.contacts)\n                .map(key => {\n                    return <Contact contactTitle={key}\n                                    contactValue={profile.contacts[key as keyof ContactValueType]}/>\n                })}\n        </div>\n    </div>\n}\n\nexport const Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n}\n\n\nexport default ProfileInfo;\n\n// Video: 97,  time: 15.23\n// Video: 11 - React + TypeScript / Типизируем ВСЁ / React JS - Путь Самурая 2.0 , time: 1.18.30","import React from 'react';\nimport s from './Post.module.css'\n\ntype messageType = {\n    message: string,\n    likesCount: number\n}\nconst Post = (props: messageType) => {\n\n    return (\n        <div className={s.item}>\n            <img src='https://cspromogame.ru//storage/upload_images/avatars/3863.jpg'/>\n            {props.message}\n            <div>\n                <span>Like </span>{props.likesCount}\n            </div>\n        </div>\n    )\n}\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\nexport type postsType = {\n    id: number,\n    message: string,\n    likesCount: number\n}\ntype MyPostsType = {\n\n    posts: Array<postsType>\n    //newPostText: string\n    //updateNewPostText: (newText: string) => void\n    addPost: (newPostBody: string) => void\n}\n\ntype AddPostType = {\n    newPostText: string\n}\nconst maxLength = maxLengthCreator(10)\nconst AddNewPostForm:React.FC<InjectedFormProps<AddPostType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} name={'newPostText'} placeholder=\"Enter you post\"\n                       validate={[required, maxLength]}/>\n\n            </div>\n            <div>\n                <button>Add Post</button>\n            </div>\n        </form>\n    )\n}\nconst AddNewPostReduxForm = reduxForm<AddPostType>({\n    form: 'ProfileAddNewPostForm'\n})(AddNewPostForm)\n\n// componentDidMount() {\n//     setTimeout(() => {this.setState({a: 12})}, 1500)\n// }\n//\n// shouldComponentUpdate(nextProps: Readonly<MyPostsType>, nextState: Readonly<{}>): boolean {\n//     return nextProps !==this.props || nextState !== this.state\n// }\nconst MyPosts = React.memo((props: MyPostsType) => {\n    // componentDidMount() {\n//     setTimeout(() => {this.setState({a: 12})}, 1500)\n// }\n//\n// shouldComponentUpdate(nextProps: Readonly<MyPostsType>, nextState: Readonly<{}>): boolean {\n//     return nextProps !==this.props || nextState !== this.state\n// }\n//     console.log(\"RENDER\")\n\n    let PostsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\n\n    //let onAddPost = () => props.addPost()\n\n    // let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    //     let text = e.currentTarget.value\n    //     props.updateNewPostText(text)\n    // }\n    const onAddPost = (values: AddPostType) => {\n        props.addPost(values.newPostText)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>New posts</h3>\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\n            {/*\n            <div>\n                <div>\n                    <textarea onChange={onPostChange} value={props.newPostText}/>\n                </div>\n                <div>\n                    <button onClick={onAddPost}>Add Post</button>\n                </div>\n            </div>\n*/}\n            <div className={s.posts}>\n                <div className={s.item}>\n                    {PostsElements}\n                </div>\n            </div>\n        </div>\n    )\n})\n\nexport default MyPosts;","import React from 'react';\nimport {ActionsTypes, RootStateType, SubscribeType} from \"../../../redux/store\";\nimport {addPostAC} from '../../../redux/profile-reducer';\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\n// type StoreType = {\n//     _state: RootStateType\n//     _callSubscriber: () => void\n//     getState: () => RootStateType\n//     subscribe: SubscribeType\n//     dispatch: (action: ActionsTypes) => void\n// }\n// type StoreOfType = {\n//     store: StoreType\n// }\n\nlet MapStateToProps = (state:RootStateType) => {\n    return {\n        posts:state.profilePage.posts,\n        //newPostText:state.profilePage.newPostText\n    }\n}\nlet MapDispatchToProps = (dispatch:(action: ActionsTypes) => void) => {\n    return {\n        // updateNewPostText: (text: string) => {\n        //     let action = updateNewPostTextAC(text)\n        //     dispatch(action)\n        // },\n        addPost: (newPostText: string) => dispatch(addPostAC(newPostText))\n    }\n}\n\nconst MyPostsContainer = connect(MapStateToProps, MapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;","import React, {ChangeEvent} from 'react';\nimport s from './Profile.module.css'\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport {ActionsTypes, ProfileType, RootStateType, SubscribeType} from \"../../redux/store\";\nimport MyPostsContainer from \"./MyPosts/MyPostContainer\";\n\n\n\ntype StoreType = {\n    _state: RootStateType\n    _callSubscriber: () => void\n    getState: () => RootStateType\n    subscribe: SubscribeType\n    dispatch: (action: ActionsTypes) => void\n}\ntype StoreOfType = {\n    store: StoreType\n}\ntype ProfilePropsType = {\n    isOwner: boolean\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    savePhoto: ( file: File) => void\n    saveProfile: (profileData:ProfileType) => Promise<ProfileType>\n}\n\nconst Profile = (props: ProfilePropsType) => {\n\n    return (\n        <div>\n            <ProfileInfo isOwner={props.isOwner}\n                         profile={props.profile}\n                         status={props.status}\n                         updateStatus={props.updateStatus}\n                         savePhoto={props.savePhoto}\n                         saveProfile={props.saveProfile}\n            />\n            <MyPostsContainer/>\n        </div>\n    )\n}\nexport default Profile;","import React from 'react';\nimport {ProfileType} from \"../../redux/store\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getStatus,\n    getUserProfile,\n    updateStatus,\n    savePhoto,\n    saveProfile\n} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from 'react-router';\nimport {AppStoreType} from \"../../redux/redux-store\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\n// type StoreType = {\n//     _state: RootStateType\n//     _callSubscriber: () => void\n//     getState: () => RootStateType\n//     subscribe: SubscribeType\n//     dispatch: (action: ActionsTypes) => void\n// }\n// type StoreOfType = {\n//     store: StoreType\n// }\ntype PathParamType = {\n    userId: string\n}\ntype MapStatePropsType = {\n    profile: ProfileType,\n    status: string,\n    authorizedUserId: string | null\n    isAuth: boolean\n}\ntype MapDispatchPropsType = {\n\n    getUserProfile: (userId: string | null) => void\n    getStatus: (userId: string | null) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profileData:ProfileType) => Promise<ProfileType>\n}\ntype ProfileContainerPropsType = MapStatePropsType & MapDispatchPropsType\ntype PropsType = RouteComponentProps<PathParamType> & ProfileContainerPropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n    refreshProfile() {\n        let userId: string | null = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}\n                //saveProfile={this.props.saveProfile}\n            />\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStoreType): MapStatePropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n    //withAuthRedirect\n)(ProfileContainer)\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\n// // let AuthRedirectComponent = (props: PropsType) => {\n// //     if (!props.isAuth) return <Redirect to= '/login' />\n// //     return <ProfileContainer { ... props}/>\n// // }\n//\n//\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\n//\n// export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent)"],"sourceRoot":""}