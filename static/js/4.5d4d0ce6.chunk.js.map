{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/AddMessageForm/AddMessageForm.tsx","Components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageAC","Component","restProps"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,6FCiBnKC,EATI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCFvBC,EAJC,SAACT,GACb,OAAO,qBAAKG,UAAWC,IAAEM,QAAlB,SAA4BV,EAAMU,W,iCCCvCC,EAAYC,YAAiB,IAepBC,cAA0B,CAACC,KAAM,kBAAjCD,EAbsD,SAACb,GAClE,OACI,uBAAMe,SAAUf,EAAMgB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUX,KAAM,iBAAkBY,YAAY,oBACzDC,SAAU,CAACC,IAAUX,OAEhC,8BACI,kDCuBDY,EA3BmC,SAACvB,GAE/C,IAAIwB,EAAQxB,EAAMyB,YACdC,EAAkBF,EAAMG,QACvBC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAiBN,GAAI2B,EAAE3B,IAAZ2B,EAAE3B,OAE3C4B,EAAmBN,EAAMO,SACxBH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,SAAcsB,EAAE9B,OAQlD,OACI,sBAAKC,UAAWC,IAAEuB,QAAlB,UACI,qBAAKxB,UAAWC,IAAE6B,aAAlB,SACKP,IAEL,qBAAKvB,UAAWC,IAAE2B,SAAlB,SACKD,IAEL,cAAC,EAAD,CAAgBf,SAZF,SAACmB,GACnBlC,EAAMmC,YAAYD,EAAOE,uB,+BCnB3BC,EAA6B,SAACb,GAC/B,MAAO,CACHc,OAAQd,EAAMe,KAAKD,S,YCabE,sBACXC,aAbkB,SAACjB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAACiB,GACtB,MAAO,CACHP,YAAa,SAACC,GACVM,EAASC,YAAcP,UDN5B,SAA8BQ,GASjC,OADqCH,YAAQJ,EAARI,EANX,SAACzC,GAAgC,IAClDsC,EAAwBtC,EAAxBsC,OAAWO,EADsC,YACzB7C,EADyB,YAEtD,OAAKsC,EACE,cAACM,EAAD,eAAeC,IADF,cAAC,IAAD,CAAUtC,GAAG,gBCM1BiC,CAEOjB","file":"static/js/4.5d4d0ce6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Cht7\",\"dialogsItems\":\"Dialogs_dialogsItems__3Vmz4\",\"active\":\"Dialogs_active__3GB6a\",\"messages\":\"Dialogs_messages__1IUR8\",\"message\":\"Dialogs_message__1emO6\"};","import React from \"react\";\nimport {NavLink} from 'react-router-dom'\nimport s from './../Dialogs.module.css'\n\n\ntype DialogItemType = {\n    name: string\n    id: string\n}\nconst DialogItem = (props: DialogItemType) => {\n    let path = \"/dialogs/\" + props.id\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem","import React from \"react\";\nimport s from './../Dialogs.module.css'\n\n\ntype MessageType = {\n    message: string\n}\nconst Message = (props: MessageType) => {\n    return <div className={s.message}>{props.message}</div>\n\n}\nexport default Message","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\n\n\nexport type AddMessageType = {\n    newMessageBody: string\n}\nconst maxLength = maxLengthCreator(50)\n\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageType>>  = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} name={'newMessageBody'} placeholder=\"Enter you message\"\n                       validate={[required, maxLength]}/>\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\nexport default reduxForm<AddMessageType>({form: 'AddMessageForm'})(AddMessageForm)","import React, {ChangeEvent} from \"react\";\nimport s from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {DialogsPageType} from \"../../redux/store\";\nimport AddMessageForm, {AddMessageType} from \"./AddMessageForm/AddMessageForm\";\n\n\nexport type DialogsAndMessagesType = {\n    dialogsPage: DialogsPageType\n    updateNewMessageBody: (body: string) => void\n    sendMessage: (newMessageBody: string) => void\n    isAuth: boolean\n}\n\nconst Dialogs: React.FC<DialogsAndMessagesType> = (props) => {\n\n    let state = props.dialogsPage\n    let dialogsElements = state.dialogs\n        .map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\n\n    let messagesElements = state.messages\n        .map(m => <Message message={m.message} key={m.id}/>)\n\n    // let newMessageBodyElements = state.newMessageBody\n\n    const addNewMessage = (values: AddMessageType) => {\n        props.sendMessage(values.newMessageBody)\n    }\n    //if (!props.isAuth) return <Redirect to= '/login' />\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n            </div>\n            <AddMessageForm onSubmit={addNewMessage}/>\n        </div>\n    )\n}\nexport default Dialogs","import React, { ComponentType } from 'react'\nimport {Redirect} from \"react-router-dom\";\nimport {AppStoreType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\nconst mapStateToPropsForRedirect = (state: AppStoreType):MapStateToPropsType => {\n     return {\n         isAuth: state.auth.isAuth\n     }\n}\nexport function withAuthRedirect <T>(Component: ComponentType<T>)  {\n\n    const RedirectComponent = (props: MapStateToPropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to='/login'/>\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n    return ConnectedAuthRedirectComponent\n}\n\n","import React from \"react\";\nimport {ActionsTypes} from \"../../redux/store\";\nimport {sendMessageAC} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\n\nimport {AppStoreType} from \"../../redux/redux-store\";\nimport {Redirect} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nlet mapStateToProps = (state: AppStoreType) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\nlet mapDispatchToProps = (dispatch: (action: ActionsTypes) => void) => {\n    return {\n        sendMessage: (newMessageBody: string) => {\n            dispatch(sendMessageAC(newMessageBody))\n        }\n    }\n}\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect)(Dialogs)"],"sourceRoot":""}