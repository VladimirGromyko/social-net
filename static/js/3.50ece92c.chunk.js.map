{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","discriptionBlock","src","photos","large","Preloader","Post","item","message","likesCount","maxLength","maxLengthCreator","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","React","memo","PostsElements","posts","map","p","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,6BAA6B,iBAAmB,wC,oBCA5ED,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,6IC2CVC,EApCgB,SAACC,GAA8B,IAAD,EAE3BC,oBAAS,GAFkB,mBAEpDC,EAFoD,KAE1CC,EAF0C,OAG/BF,mBAASD,EAAMI,QAHgB,mBAGpDA,EAHoD,KAG5CC,EAH4C,KAKzDC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAaV,OACI,iCACMF,GACF,8BACI,sBAAMK,cAfO,WACrBJ,GAAY,IAcJ,SAAwCH,EAAMI,QAAU,UAG3DF,GACD,8BACI,uBAAOM,SAbI,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAYeC,WAAW,EAAMC,OAjBnC,WACvBV,GAAY,GACZH,EAAMc,aAAaV,IAemEO,MAAOP,UCJtFW,EAlBK,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,QAASZ,EAA2C,EAA3CA,OAAQU,EAAmC,EAAnCA,aACnC,OAAKE,EAID,8BAMI,sBAAKC,UAAWC,IAAEC,iBAAlB,UACI,qBAAKC,IAAKJ,EAAQK,OAAOC,QACzB,cAAC,EAAD,CAAwBlB,OAASA,EAAQU,aAAcA,SAXxD,cAACS,EAAA,EAAD,K,4CCEAC,EAZF,SAACxB,GAEV,OACI,sBAAKiB,UAAWC,IAAEO,KAAlB,UACI,qBAAKL,IAAI,mEACRpB,EAAM0B,QACP,gCACI,yCAAmB1B,EAAM2B,kB,iCCSnCC,EAAYC,YAAiB,IAe7BC,EAAsBC,YAAuB,CAC/CC,KAAM,yBADkBD,EAdoC,SAAC/B,GAC7D,OACI,uBAAMiC,SAAUjC,EAAMkC,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,KAAM,cAAeC,YAAY,iBACtDC,SAAU,CAACC,IAAUb,OAGhC,8BACI,sDA6DDc,EA7CCC,IAAMC,MAAK,SAAC5C,GAUxB,IAAI6C,EAAgB7C,EAAM8C,MAAMC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAiBtB,QAASsB,EAAEtB,QAASC,WAAYqB,EAAErB,YAAxCqB,EAAEC,OAYtD,OACI,sBAAKhC,UAAWC,IAAEgC,WAAlB,UACI,2CACA,cAACpB,EAAD,CAAqBG,SAPX,SAACkB,GACfnD,EAAMoD,QAAQD,EAAOE,gBAiBjB,qBAAKpC,UAAWC,IAAE4B,MAAlB,SACI,qBAAK7B,UAAWC,IAAEO,KAAlB,SACKoB,Y,QCnDNS,EAFUC,aAhBH,SAACC,GACnB,MAAO,CACHV,MAAMU,EAAMC,YAAYX,UAIP,SAACY,GACtB,MAAO,CAKHN,QAAS,SAACC,GAAD,OAAyBK,EAASC,YAAUN,QAIpCE,CAA6Cb,GCCvDkB,EAVC,SAAC5D,GAEb,OACI,gCACI,cAAC,EAAD,CAAagB,QAAShB,EAAMgB,QAASZ,OAAQJ,EAAMI,OAAQU,aAAcd,EAAMc,eAE/E,cAAC,EAAD,Q,eCSN+C,E,uKACF,WACI,IAAIC,EAAwBC,KAAK/D,MAAMgE,MAAMC,OAAOH,OAG/CA,IAGDA,EAASC,KAAK/D,MAAMkE,mBAEhBH,KAAK/D,MAAMmE,QAAQC,KAAK,UAGhCL,KAAK/D,MAAMqE,eAAeP,GAC1BC,KAAK/D,MAAMsE,UAAUR,K,oBAGzB,WACI,OACI,cAAC,EAAD,2BAAaC,KAAK/D,OAAlB,IACSgB,QAAS+C,KAAK/D,MAAMgB,QACpBZ,OAAQ2D,KAAK/D,MAAMI,OACnBU,aAAciD,KAAK/D,MAAMc,oB,GAtBf6B,IAAM4B,WAkCtBC,sBACXjB,aARkB,SAACC,GAAD,MAA6C,CAC/DxC,QAASwC,EAAMC,YAAYzC,QAC3BZ,OAAQoD,EAAMC,YAAYrD,OAC1B8D,iBAAkBV,EAAMiB,KAAKX,OAC7BY,OAAQlB,EAAMiB,KAAKC,UAIM,CAACL,mBAAgBC,cAAWxD,mBACrD6D,IAFWH,CAIbX","file":"static/js/3.50ece92c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__2q0GZ\",\"discriptionBlock\":\"ProfileInfo_discriptionBlock__14Cp7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__DKnWn\",\"posts\":\"MyPosts_posts__CU8Vc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__17Zex\"};","import React, {ChangeEvent, useEffect, useState,} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"---\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deActivateEditMode} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/store\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}: ProfileInfoType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            {/*<div className={s.content}>\r\n                <img\r\n                    src=\"https://helpx.adobe.com/content/dam/help/en/photoshop/using/convert-color-image-black-white/jcr_content/main-pars/before_and_after/image-before/Landscape-Color.jpg\"\r\n                    alt=\"\"/>\r\n            </div>*/}\r\n            <div className={s.discriptionBlock}>\r\n                <img src={profile.photos.large}/>\r\n                <ProfileStatusWithHooks status ={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype messageType = {\r\n    message: string,\r\n    likesCount: number\r\n}\r\nconst Post = (props: messageType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://cspromogame.ru//storage/upload_images/avatars/3863.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like </span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type postsType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\ntype MyPostsType = {\r\n\r\n    posts: Array<postsType>\r\n    //newPostText: string\r\n    //updateNewPostText: (newText: string) => void\r\n    addPost: (newPostBody: string) => void\r\n}\r\n\r\ntype AddPostType = {\r\n    newPostText: string\r\n}\r\nconst maxLength = maxLengthCreator(10)\r\nconst AddNewPostForm:React.FC<InjectedFormProps<AddPostType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newPostText'} placeholder=\"Enter you post\"\r\n                       validate={[required, maxLength]}/>\r\n\r\n            </div>\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddNewPostReduxForm = reduxForm<AddPostType>({\r\n    form: 'ProfileAddNewPostForm'\r\n})(AddNewPostForm)\r\n\r\n// componentDidMount() {\r\n//     setTimeout(() => {this.setState({a: 12})}, 1500)\r\n// }\r\n//\r\n// shouldComponentUpdate(nextProps: Readonly<MyPostsType>, nextState: Readonly<{}>): boolean {\r\n//     return nextProps !==this.props || nextState !== this.state\r\n// }\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    // componentDidMount() {\r\n//     setTimeout(() => {this.setState({a: 12})}, 1500)\r\n// }\r\n//\r\n// shouldComponentUpdate(nextProps: Readonly<MyPostsType>, nextState: Readonly<{}>): boolean {\r\n//     return nextProps !==this.props || nextState !== this.state\r\n// }\r\n//     console.log(\"RENDER\")\r\n\r\n    let PostsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    //let onAddPost = () => props.addPost()\r\n\r\n    // let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let text = e.currentTarget.value\r\n    //     props.updateNewPostText(text)\r\n    // }\r\n    const onAddPost = (values: AddPostType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>New posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            {/*\r\n            <div>\r\n                <div>\r\n                    <textarea onChange={onPostChange} value={props.newPostText}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add Post</button>\r\n                </div>\r\n            </div>\r\n*/}\r\n            <div className={s.posts}>\r\n                <div className={s.item}>\r\n                    {PostsElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {ActionsTypes, RootStateType, SubscribeType} from \"../../../redux/store\";\r\nimport {addPostAC} from '../../../redux/profile-reducer';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n// type StoreType = {\r\n//     _state: RootStateType\r\n//     _callSubscriber: () => void\r\n//     getState: () => RootStateType\r\n//     subscribe: SubscribeType\r\n//     dispatch: (action: ActionsTypes) => void\r\n// }\r\n// type StoreOfType = {\r\n//     store: StoreType\r\n// }\r\n\r\nlet MapStateToProps = (state:RootStateType) => {\r\n    return {\r\n        posts:state.profilePage.posts,\r\n        //newPostText:state.profilePage.newPostText\r\n    }\r\n}\r\nlet MapDispatchToProps = (dispatch:(action: ActionsTypes) => void) => {\r\n    return {\r\n        // updateNewPostText: (text: string) => {\r\n        //     let action = updateNewPostTextAC(text)\r\n        //     dispatch(action)\r\n        // },\r\n        addPost: (newPostText: string) => dispatch(addPostAC(newPostText))\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(MapStateToProps, MapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {ActionsTypes, ProfileType, RootStateType, SubscribeType} from \"../../redux/store\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostContainer\";\r\n\r\n\r\n\r\ntype StoreType = {\r\n    _state: RootStateType\r\n    _callSubscriber: () => void\r\n    getState: () => RootStateType\r\n    subscribe: SubscribeType\r\n    dispatch: (action: ActionsTypes) => void\r\n}\r\ntype StoreOfType = {\r\n    store: StoreType\r\n}\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n/*const Profile = (props: StoreOfType) => {*/\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            {/*    <MyPostsContainer store={props.store}/>*/}\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport {ProfileType} from \"../../redux/store\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router';\r\nimport {AppStoreType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n// type StoreType = {\r\n//     _state: RootStateType\r\n//     _callSubscriber: () => void\r\n//     getState: () => RootStateType\r\n//     subscribe: SubscribeType\r\n//     dispatch: (action: ActionsTypes) => void\r\n// }\r\n// type StoreOfType = {\r\n//     store: StoreType\r\n// }\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    authorizedUserId: string | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n\r\n    getUserProfile: (userId: string | null) => void\r\n    getStatus: (userId: string | null) => void\r\n    updateStatus: (status: string) => void\r\n    //getUserProfile: (profile: ProfileType) => void\r\n}\r\ntype ProfileContainerPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId: string | null = this.props.match.params.userId\r\n        //let userId = this.props.userId\r\n\r\n        if (!userId) {\r\n            // userId = \"1049\"\r\n            //   userId = \"17281\"\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStoreType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n    //A: 4\r\n})\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer)\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n// // let AuthRedirectComponent = (props: PropsType) => {\r\n// //     if (!props.isAuth) return <Redirect to= '/login' />\r\n// //     return <ProfileContainer { ... props}/>\r\n// // }\r\n//\r\n//\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n//\r\n// export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent)"],"sourceRoot":""}